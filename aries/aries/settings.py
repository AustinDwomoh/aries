"""
Django settings for aries project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""


from pathlib import Path
import os,environ,logging

logger = logging.getLogger(__name__)
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env()

# Try to read environment file, fallback to defaults
try:
    environ.Env.read_env(os.path.join(BASE_DIR, ".env"))
except:
    print("[SETTINGS] No .env.production file found, using defaults")

# ============================================================================ #
#                                    SECRETS                                   #
# ============================================================================ #
SECRET_KEY = env("SECRET_KEY", default="django-insecure-change-me-in-production")
DEBUG = env.bool("DEBUG", default=True)
ENV = env("ENV", default="development")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["localhost", "127.0.0.1", "0.0.0.0"])
RESEND_API_KEY = env("RESEND_API", default="your-resend-api-key-here") #mail api

print(f"[SETTINGS] Environment loaded - DEBUG: {DEBUG}, ENV: {ENV}")
print(f"[SETTINGS] Allowed hosts: {ALLOWED_HOSTS}")
print(f"[SETTINGS] Resend API key set: {bool(RESEND_API_KEY and RESEND_API_KEY != 'your-resend-api-key-here')}")
SITE_DOMAIN = env("SITE_DOMAIN", default="localhost:8000") #swicthes between http and https depe
SITE_PROTOCOL = env("SITE_PROTOCOL", default="http")
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default="noreply@aries.com")
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_PRELOAD = True
LOG_BASE_DIR = os.path.join(BASE_DIR, "error_logs")
os.makedirs(LOG_BASE_DIR, exist_ok=True)
# ============================================================================ #
#                                 cookie stuff                                 #
# ============================================================================ #
SESSION_COOKIE_SECURE = env.bool("SESSION_COOKIE_SECURE")
CSRF_COOKIE_SECURE = env.bool("CSRF_COOKIE_SECURE")
SESSION_COOKIE_AGE = env.int("SESSION_COOKIE_AGE")
SESSION_SAVE_EVERY_REQUEST = env.bool("SESSION_SAVE_EVERY_REQUEST")
SESSION_EXPIRE_AT_BROWSER_CLOSE = env.bool("SESSION_EXPIRE_AT_BROWSER_CLOSE")
SOCIAL_ICONS = {
    "discord": '<i class="bi bi-discord"></i>',
    "x": '<i class="bi bi-twitter"></i>',
    'whatsapp': '<i class="bi bi-whatsapp"></i>',
    'instagram': '<i class="bi bi-instagram"></i>',
    'tiktok':' <i class="bi bi-tiktok"></i>',
    'youtube': '<i class="bi bi-youtube"></i>',
    'twitch': '<i class="bi bi-twitch"></i>',
    'website': '<i class="bi bi-browser-chrome"></i>',
    'other': '<i class="bi bi-link-45deg"></i>',
    }
# ============================================================================ #
#                                    SECRETS                                   #
# ============================================================================ #

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# SECURITY WARNING: don't run with debug turned on in production!

INSTALLED_APPS = [
    'Home.apps.HomeConfig',
    'clans.apps.ClansConfig',
    'organizations.apps.OrganizationsConfig',  # New unified organizations app
    'tournaments.apps.TournamentsConfig',
    'users.apps.UsersConfig',
    'rest_framework',         # Django REST Framework
    'django_filters',         # Django Filter for API filtering
    'corsheaders',           # CORS headers for frontend
    'jet','jet.dashboard',  # Django JET admin interface and dashboard
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django_countries"  # For country field in models
]
# API-only backend configuration

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_BASE_DIR, 'django_errors.log'),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}
# Configure logging to capture only ERROR-level messages in a dedicated log file
# Note: Verify that the server has write permissions for /var/log/django/error.log

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Default authentication backend (username/password)
    'scripts.verify.MultiFieldAuthBackend',       # Custom backend supporting multi-field login
    'scripts.verify.ClanBackend',                  # Custom backend handling clan-based authentication logic
]
# Custom authentication backends extend default auth to support additional login workflows
# Order matters: Django tries them in sequence until one authenticates successfully

ROOT_URLCONF = 'aries.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'scripts.context.profile_picture_context',  # Custom context processor to give accurate profile picture globally
            ],
        },
    },
]

WSGI_APPLICATION = 'aries.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True
JET_SIDE_MENU_COMPACT = True
JET_DEFAULT_THEME = 'light-gray'
JET_MODULE_GOOGLE_ANALYTICS_CLIENT_SECRETS_FILE = os.path.join(BASE_DIR, 'client_secrets.json')
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
LOGIN_REDIRECT_URL = 'Home'   # Redirect users here after successful login
LOGOUT_REDIRECT_URL = 'Home'  # Redirect users here after logout
LOGIN_URL = 'login'           # URL to redirect unauthorized users for login

MEDIA_URL = '/media/'         # Base URL to serve user-uploaded media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Filesystem path where media files are stored

STATIC_URL = '/static/'       # URL prefix for serving static files (CSS, JS, images)
# STATICFILES_DIRS removed - using API-only backend, no static files needed
STATIC_ROOT = BASE_DIR / 'staticfiles'  # Directory where 'collectstatic' will gather all static files for production

# Template-related settings removed for API-only backend

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ============================================================================ #
#                              REST FRAMEWORK                                 #
# ============================================================================ #

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

# ============================================================================ #
#                                  CORS                                       #
# ============================================================================ #

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:3001",  # Vite dev server port
    "http://127.0.0.1:3001",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_ALL_ORIGINS = env.bool("DEBUG", default=False)  # Only allow all origins in debug mode

 # Custom base directory for application error logs

    
