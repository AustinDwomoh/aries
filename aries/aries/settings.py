"""
Django settings for aries project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os,environ
import traceback
from django.core.mail import EmailMessage

from datetime import datetime
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env(
    DEBUG=(bool, False),
    ENV=(str, 'production')
)
environ.Env.read_env(os.path.join(BASE_DIR, ".env.production"))
# ============================================================================ #
#                                    SECRETS                                   #
# ============================================================================ #
SECRET_KEY = env("SECRET_KEY")
DEBUG = env("DEBUG")
ENV = env("ENV")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")

SITE_DOMAIN = env("SITE_DOMAIN")
SITE_PROTOCOL = env("SITE_PROTOCOL")

DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL")
EMAIL_BACKEND = env("EMAIL_BACKEND")
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_PORT = env.int("EMAIL_PORT")
EMAIL_USE_SSL = env.bool("EMAIL_USE_SSL")
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=False)
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")

SESSION_COOKIE_SECURE = env.bool("SESSION_COOKIE_SECURE")
CSRF_COOKIE_SECURE = env.bool("CSRF_COOKIE_SECURE")
SESSION_COOKIE_AGE = env.int("SESSION_COOKIE_AGE")
SESSION_SAVE_EVERY_REQUEST = env.bool("SESSION_SAVE_EVERY_REQUEST")
SESSION_EXPIRE_AT_BROWSER_CLOSE = env.bool("SESSION_EXPIRE_AT_BROWSER_CLOSE")
# ============================================================================ #
#                                    SECRETS                                   #
# ============================================================================ #

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# SECURITY WARNING: don't run with debug turned on in production!

INSTALLED_APPS = [
    'Home.apps.HomeConfig',
    'clans.apps.ClansConfig',
    'tournaments.apps.TournamentsConfig',
    'users.apps.UsersConfig',
    'crispy_forms',
    "crispy_bootstrap5",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
""" LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': '/var/log/django/error.log',  # make sure Django user can write here
        },
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
} """

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Default user 
    'users.verify.MultiFieldAuthBackend',
]

ROOT_URLCONF = 'aries.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'aries.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
LOGIN_REDIRECT_URL = 'Home'
LOGOUT_REDIRECT_URL = 'Home'
LOGIN_URL = 'login'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_URL = '/static/'
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"
STATICFILES_DIRS = [
    BASE_DIR / 'static',
      # Path to your static files folder
]
STATIC_ROOT = BASE_DIR / 'staticfiles'
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


class ErrorHandler:
    LOG_BASE_DIR = 'error_logs'
    NOTIFY_EMAIL = 'dwomohaustin14@gmail.com'

    def __init__(self, notify=True):
        self.notify = notify
        os.makedirs(self.LOG_BASE_DIR, exist_ok=True)  # Base directory

    def handle(self, error, context=""):
        now = datetime.now()
        day_folder = now.strftime("%Y-%m-%d")
        time_stamp = now.strftime("%H-%M-%S")

        folder_path = os.path.join(self.LOG_BASE_DIR, day_folder)
        os.makedirs(folder_path, exist_ok=True)  # Make daily folder

        file_path = os.path.join(folder_path, f"error_{time_stamp}.log")

        error_message = (
            f"Timestamp: {now}\n"
            f"Context: {context}\n"
            f"Exception: {str(error)}\n\n"
            f"Traceback:\n{traceback.format_exc()}\n"
        )

        with open(file_path, "w", encoding="utf-8") as f:
            f.write(error_message)

        if self.notify:
            self.notify_admin(file_path)

    def notify_admin(self, file_path):
        try:
            email = EmailMessage(
                subject='[ALERT] Server Error Notification',
                body='An error occurred. Please see the attached log file.',
                from_email=f"Aries Project <{DEFAULT_FROM_EMAIL}>",
                to=[self.NOTIFY_EMAIL]
            )
            email.attach_file(file_path)
            email.send()
        except Exception as e:
            fallback_path = os.path.join(self.LOG_BASE_DIR, "notify_failures.txt")
            with open(fallback_path, "a", encoding="utf-8") as f:
                f.write(f"{datetime.now()} - Failed to notify admin: {e}\n")
