# =========================================
# GitHub Actions Workflow: Aries CI/CD
# Purpose: Deploy Django project to production via SSH
# Features:
# - Timestamped releases for atomic deploys & rollback
# - Shared virtualenv for dependencies
# - Database migrations & collectstatic
# - Service restarts (Gunicorn, Nginx, uWSGI)
# - Discord notifications for success/failure
# - Cleanup of old releases (keep last 5)
# =========================================
name: Aries CI/CD

# Trigger: run workflow on push to main branch
on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
        # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

        # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Step 3: Install dependencies & lint code
      - name: Install dependencies
        run: |
          # Upgrade pip
          python -m pip install --upgrade pip
          
          # Install project dependencies
          pip install -r requirements.txt
          

      # Step 4: Deploy to production via SSH
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            # Stop script on error, unset variable, or failed pipe
            set -euo pipefail
            
             # =============================
            # Define variables
            # =============================
            RELEASES_DIR="/var/www/aries/releases"   # All releases stored here
            CURRENT_LINK="/var/www/aries/current"    # Symlink pointing to active release
            VENV="/var/www/aries/server/bin"         # Shared virtualenv
            REPO="git@github.com:INPHINITHY/aries.git"
            KEEP_RELEASES=5                          # Number of old releases to keep

            # Paths for clarity
            RELEASE_ROOT="$RELEASES_DIR/$(date +%Y%m%d%H%M%S)"
            APP_DIR="$RELEASE_ROOT/aries"
            # =============================
            # Symlink shared configs & data
            # =============================
            ln -sfn /var/www/aries/aries/.env.production "$APP_DIR/.env.production"
            ln -sfn /var/www/aries/aries/aries.ini "$APP_DIR/aries.ini"
            ln -sfn /var/www/aries/aries/uwsgi_params "$APP_DIR/uwsgi_params"
            
            # SQLite DB 
            ln -sfn /var/www/aries/aries/db.sqlite3 "$APP_DIR/db.sqlite3"
            
            # Media uploads (important so user uploads persist across releases)
            ln -sfn /var/www/aries/aries/media "$APP_DIR/media"

            # =============================
            # 1. Create new release folder
            # =============================
            mkdir -p "$RELEASE_ROOT"

            # =============================
            # 2. Clone code into new release
            # =============================
            git clone "$REPO" "$RELEASE_ROOT"
            git -C "$RELEASE_ROOT" checkout main   # ensure on main branch

            # =============================
            # 3. Install dependencies (shared virtualenv)
            # =============================
            $VENV/pip install -r "$RELEASE_ROOT/requirements.txt" --upgrade --quiet

            # =============================
            # 4. Run Django migrations & collect static
            # =============================
            cd "$APP_DIR"
            $VENV/python manage.py migrate --noinput
            $VENV/python manage.py collectstatic --noinput

            # =============================
            # 5. Switch symlink to new release (atomic deploy)
            # =============================
            ln -sfn "$RELEASE_ROOT" "$CURRENT_LINK"

            # =============================
            # 6. Restart services
            # =============================
            sudo systemctl restart gunicorn
            sudo systemctl restart nginx
            sudo systemctl restart emperor.uwsgi.service

            # =============================
            # 7. Capture last 20 lines of Gunicorn logs
            # =============================
            sudo journalctl -u gunicorn --no-pager -n 20 > /tmp/deploy_last_logs.txt

            # =============================
            # 8. Cleanup old releases (keep last $KEEP_RELEASES)
            # =============================
            cd "$RELEASES_DIR"
            ls -1tr | head -n -$KEEP_RELEASES | xargs -r rm -rf

      # Step 5: Notify Discord on deployment failure
      - name: Notify Discord on failure
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
          -d "{\"content\": \":x: Django deploy failed on **${{ github.repository }}** \nBranch: **${{ github.ref_name }}** \nCommit: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}> \nCheck logs: /tmp/deploy_last_logs.txt\"}" \
          ${{ secrets.DISCORD_WEBHOOK }}

      # Step 6: Notify Discord on deployment success
      - name: Notify Discord on success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
          -d "{\"content\": \":white_check_mark: Django deploy succeeded on **${{ github.repository }}** \nBranch: **${{ github.ref_name }}** \nCommit: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\"}" \
          ${{ secrets.DISCORD_WEBHOOK }}
